
hongngoai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  080039ac  080039ac  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039ac  080039ac  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080039b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000060  08003a14  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003a14  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094b8  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c84  00000000  00000000  0000e541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  000101c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066c  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001797a  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bde1  00000000  00000000  00028a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874c9  00000000  00000000  000347f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbcc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  000bbd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000be398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080037d4 	.word	0x080037d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080037d4 	.word	0x080037d4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb20 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d4 	bl	8000304 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f86a 	bl	8000234 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8a6 	bl	80002b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer) );
 8000164:	2204      	movs	r2, #4
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <main+0x28>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <main+0x2c>)
 800016a:	f002 f858 	bl	800221e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016e:	bf00      	nop
 8000170:	e7fd      	b.n	800016e <main+0x22>
 8000172:	bf00      	nop
 8000174:	20000100 	.word	0x20000100
 8000178:	200000ac 	.word	0x200000ac

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	@ 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000186:	2228      	movs	r2, #40	@ 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 fe92 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fa82 	bl	80016dc <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 f967 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fcee 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020a:	f000 f951 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000216:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fe6e 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000226:	f000 f943 	bl	80004b0 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	@ 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000246:	4a19      	ldr	r2, [pc, #100]	@ (80002ac <MX_ADC1_Init+0x78>)
 8000248:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024a:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000252:	2200      	movs	r2, #0
 8000254:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800025e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000262:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000264:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800026c:	2201      	movs	r2, #1
 800026e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000272:	f000 faf1 	bl	8000858 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 f918 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000280:	2305      	movs	r3, #5
 8000282:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000284:	2301      	movs	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000292:	f000 fd43 	bl	8000d1c <HAL_ADC_ConfigChannel>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800029c:	f000 f908 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	40012400 	.word	0x40012400

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_USART1_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e8:	f001 febe 	bl	8002068 <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f8dd 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200000ac 	.word	0x200000ac
 8000300:	40013800 	.word	0x40013800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_GPIO_Init+0x40>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <MX_GPIO_Init+0x40>)
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <MX_GPIO_Init+0x40>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0320 	and.w	r3, r3, #32
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <MX_GPIO_Init+0x40>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <MX_GPIO_Init+0x40>)
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0304 	and.w	r3, r3, #4
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a13      	ldr	r2, [pc, #76]	@ (80003a4 <HAL_UART_RxCpltCallback+0x5c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d120      	bne.n	800039c <HAL_UART_RxCpltCallback+0x54>
    {
        // Convert the received string to an integer
        water_value = atoi((char *)rx_buffer);
 800035a:	4813      	ldr	r0, [pc, #76]	@ (80003a8 <HAL_UART_RxCpltCallback+0x60>)
 800035c:	f002 fcee 	bl	8002d3c <atoi>
 8000360:	4603      	mov	r3, r0
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <HAL_UART_RxCpltCallback+0x64>)
 8000366:	801a      	strh	r2, [r3, #0]

        char enter_value[50];
        int length_input = snprintf(enter_value, sizeof(enter_value), "Enter your water_value: %d\r\n", water_value);
 8000368:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <HAL_UART_RxCpltCallback+0x64>)
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	f107 0008 	add.w	r0, r7, #8
 8000370:	4a0f      	ldr	r2, [pc, #60]	@ (80003b0 <HAL_UART_RxCpltCallback+0x68>)
 8000372:	2132      	movs	r1, #50	@ 0x32
 8000374:	f002 fd6a 	bl	8002e4c <sniprintf>
 8000378:	63f8      	str	r0, [r7, #60]	@ 0x3c
        HAL_UART_Transmit(&huart1, (uint8_t*)enter_value, length_input, 1000);
 800037a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037c:	b29a      	uxth	r2, r3
 800037e:	f107 0108 	add.w	r1, r7, #8
 8000382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000386:	480b      	ldr	r0, [pc, #44]	@ (80003b4 <HAL_UART_RxCpltCallback+0x6c>)
 8000388:	f001 febe 	bl	8002108 <HAL_UART_Transmit>

        // Restart the UART receive interrupt and turn on ADC
        HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer) );
 800038c:	2204      	movs	r2, #4
 800038e:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <HAL_UART_RxCpltCallback+0x60>)
 8000390:	4808      	ldr	r0, [pc, #32]	@ (80003b4 <HAL_UART_RxCpltCallback+0x6c>)
 8000392:	f001 ff44 	bl	800221e <HAL_UART_Receive_IT>
        HAL_ADC_Start_IT(&hadc1);
 8000396:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <HAL_UART_RxCpltCallback+0x70>)
 8000398:	f000 fb36 	bl	8000a08 <HAL_ADC_Start_IT>
    }
}
 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	@ 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40013800 	.word	0x40013800
 80003a8:	20000100 	.word	0x20000100
 80003ac:	200000fc 	.word	0x200000fc
 80003b0:	080037ec 	.word	0x080037ec
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	2000007c 	.word	0x2000007c

080003bc <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b0a0      	sub	sp, #128	@ 0x80
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <HAL_ADC_ConvCpltCallback+0xd0>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d159      	bne.n	8000482 <HAL_ADC_ConvCpltCallback+0xc6>
    {

        uint32_t current_step = HAL_ADC_GetValue(hadc);
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f000 fbd0 	bl	8000b74 <HAL_ADC_GetValue>
 80003d4:	67f8      	str	r0, [r7, #124]	@ 0x7c

        if(pre_step <= 2000 && current_step > 3000)
 80003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <HAL_ADC_ConvCpltCallback+0xd4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80003de:	d807      	bhi.n	80003f0 <HAL_ADC_ConvCpltCallback+0x34>
 80003e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80003e2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d902      	bls.n	80003f0 <HAL_ADC_ConvCpltCallback+0x34>
        {
        	change = 1;
 80003ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000494 <HAL_ADC_ConvCpltCallback+0xd8>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
        }

        if(current_step < pre_step && change == 1)
 80003f0:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <HAL_ADC_ConvCpltCallback+0xd4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d23c      	bcs.n	8000474 <HAL_ADC_ConvCpltCallback+0xb8>
 80003fa:	4b26      	ldr	r3, [pc, #152]	@ (8000494 <HAL_ADC_ConvCpltCallback+0xd8>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d138      	bne.n	8000474 <HAL_ADC_ConvCpltCallback+0xb8>
        {
        	count++;
 8000402:	4b25      	ldr	r3, [pc, #148]	@ (8000498 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	4a23      	ldr	r2, [pc, #140]	@ (8000498 <HAL_ADC_ConvCpltCallback+0xdc>)
 800040a:	6013      	str	r3, [r2, #0]
    		char buffer_rotation[50];
    		int length_rotation = snprintf(buffer_rotation, sizeof(buffer_rotation), "Rotation count: %lu\r\n", count);
 800040c:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <HAL_ADC_ConvCpltCallback+0xdc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f107 000c 	add.w	r0, r7, #12
 8000414:	4a21      	ldr	r2, [pc, #132]	@ (800049c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000416:	2132      	movs	r1, #50	@ 0x32
 8000418:	f002 fd18 	bl	8002e4c <sniprintf>
 800041c:	67b8      	str	r0, [r7, #120]	@ 0x78
    		HAL_UART_Transmit(&huart1, (uint8_t*)buffer_rotation, length_rotation, 1000);
 800041e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000420:	b29a      	uxth	r2, r3
 8000422:	f107 010c 	add.w	r1, r7, #12
 8000426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800042a:	481d      	ldr	r0, [pc, #116]	@ (80004a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800042c:	f001 fe6c 	bl	8002108 <HAL_UART_Transmit>
        	change = 0;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]

        	if(count >= 10)
 8000436:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d91a      	bls.n	8000474 <HAL_ADC_ConvCpltCallback+0xb8>

        	{
        		water_value ++;
 800043e:	4b19      	ldr	r3, [pc, #100]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	b29a      	uxth	r2, r3
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000448:	801a      	strh	r2, [r3, #0]
        		char buffer_updated[50];
        		int length_updated = snprintf(buffer_updated, sizeof(buffer_updated), "The water level has been updated: %d\r\n",  water_value );
 800044a:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0xe8>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000454:	2132      	movs	r1, #50	@ 0x32
 8000456:	f002 fcf9 	bl	8002e4c <sniprintf>
 800045a:	6778      	str	r0, [r7, #116]	@ 0x74
        		HAL_UART_Transmit(&huart1, (uint8_t*)buffer_updated, length_updated, 1000);
 800045c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800045e:	b29a      	uxth	r2, r3
 8000460:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000468:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800046a:	f001 fe4d 	bl	8002108 <HAL_UART_Transmit>
        		count = 0;
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
        	}
        }
        pre_step = 1000;
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000476:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800047a:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start_IT(&hadc1);
 800047c:	480b      	ldr	r0, [pc, #44]	@ (80004ac <HAL_ADC_ConvCpltCallback+0xf0>)
 800047e:	f000 fac3 	bl	8000a08 <HAL_ADC_Start_IT>

    }
}
 8000482:	bf00      	nop
 8000484:	3780      	adds	r7, #128	@ 0x80
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40012400 	.word	0x40012400
 8000490:	20000000 	.word	0x20000000
 8000494:	200000f8 	.word	0x200000f8
 8000498:	200000f4 	.word	0x200000f4
 800049c:	0800380c 	.word	0x0800380c
 80004a0:	200000ac 	.word	0x200000ac
 80004a4:	200000fc 	.word	0x200000fc
 80004a8:	08003824 	.word	0x08003824
 80004ac:	2000007c 	.word	0x2000007c

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <Error_Handler+0x8>

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <HAL_MspInit+0x5c>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_MspInit+0x5c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <HAL_MspInit+0x5c>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <HAL_MspInit+0x5c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_MspInit+0x60>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_MspInit+0x60>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a18      	ldr	r2, [pc, #96]	@ (800059c <HAL_ADC_MspInit+0x7c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d129      	bne.n	8000594 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 8000546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a10      	ldr	r2, [pc, #64]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_ADC_MspInit+0x80>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000570:	2320      	movs	r3, #32
 8000572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000574:	2303      	movs	r3, #3
 8000576:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <HAL_ADC_MspInit+0x84>)
 8000580:	f000 ff28 	bl	80013d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2012      	movs	r0, #18
 800058a:	f000 fe3a 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800058e:	2012      	movs	r0, #18
 8000590:	f000 fe53 	bl	800123a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40012400 	.word	0x40012400
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a20      	ldr	r2, [pc, #128]	@ (8000644 <HAL_UART_MspInit+0x9c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d139      	bne.n	800063c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_UART_MspInit+0xa0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <HAL_UART_MspInit+0xa4>)
 800060e:	f000 fee1 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4809      	ldr	r0, [pc, #36]	@ (800064c <HAL_UART_MspInit+0xa4>)
 8000628:	f000 fed4 	bl	80013d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	2025      	movs	r0, #37	@ 0x25
 8000632:	f000 fde6 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000636:	2025      	movs	r0, #37	@ 0x25
 8000638:	f000 fdff 	bl	800123a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40013800 	.word	0x40013800
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f8be 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <ADC1_2_IRQHandler+0x10>)
 80006ae:	f000 fa6d 	bl	8000b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c

080006bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <USART1_IRQHandler+0x10>)
 80006c2:	f001 fdd1 	bl	8002268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000ac 	.word	0x200000ac

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	@ (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f002 fbe0 	bl	8002ec4 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20005000 	.word	0x20005000
 8000730:	00000400 	.word	0x00000400
 8000734:	20000104 	.word	0x20000104
 8000738:	20000258 	.word	0x20000258

0800073c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000748:	f7ff fff8 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800074e:	490c      	ldr	r1, [pc, #48]	@ (8000780 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000764:	4c09      	ldr	r4, [pc, #36]	@ (800078c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f002 fbad 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fce9 	bl	800014c <main>
  bx lr
 800077a:	4770      	bx	lr
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000784:	080039b4 	.word	0x080039b4
  ldr r2, =_sbss
 8000788:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800078c:	20000254 	.word	0x20000254

08000790 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <CAN1_RX1_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 fd21 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff fe84 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fd39 	bl	8001256 <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 fd01 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000004 	.word	0x20000004
 8000818:	2000000c 	.word	0x2000000c
 800081c:	20000008 	.word	0x20000008

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	@ (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000108 	.word	0x20000108

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	@ (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000108 	.word	0x20000108

08000858 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e0be      	b.n	80009f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000884:	2b00      	cmp	r3, #0
 8000886:	d109      	bne.n	800089c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fe42 	bl	8000520 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 fb8f 	bl	8000fc0 <ADC_ConversionStop_Disable>
 80008a2:	4603      	mov	r3, r0
 80008a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f040 8099 	bne.w	80009e6 <HAL_ADC_Init+0x18e>
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8095 	bne.w	80009e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008c4:	f023 0302 	bic.w	r3, r3, #2
 80008c8:	f043 0202 	orr.w	r2, r3, #2
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7b1b      	ldrb	r3, [r3, #12]
 80008de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008f0:	d003      	beq.n	80008fa <HAL_ADC_Init+0xa2>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d102      	bne.n	8000900 <HAL_ADC_Init+0xa8>
 80008fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008fe:	e000      	b.n	8000902 <HAL_ADC_Init+0xaa>
 8000900:	2300      	movs	r3, #0
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7d1b      	ldrb	r3, [r3, #20]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d119      	bne.n	8000944 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7b1b      	ldrb	r3, [r3, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d109      	bne.n	800092c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	3b01      	subs	r3, #1
 800091e:	035a      	lsls	r2, r3, #13
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	e00b      	b.n	8000944 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000930:	f043 0220 	orr.w	r2, r3, #32
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093c:	f043 0201 	orr.w	r2, r3, #1
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	430a      	orrs	r2, r1
 8000956:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <HAL_ADC_Init+0x1a8>)
 8000960:	4013      	ands	r3, r2
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	430b      	orrs	r3, r1
 800096a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000974:	d003      	beq.n	800097e <HAL_ADC_Init+0x126>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d104      	bne.n	8000988 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	3b01      	subs	r3, #1
 8000984:	051b      	lsls	r3, r3, #20
 8000986:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_ADC_Init+0x1ac>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d10b      	bne.n	80009c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	f023 0303 	bic.w	r3, r3, #3
 80009ba:	f043 0201 	orr.w	r2, r3, #1
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c2:	e018      	b.n	80009f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c8:	f023 0312 	bic.w	r3, r3, #18
 80009cc:	f043 0210 	orr.w	r2, r3, #16
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	f043 0201 	orr.w	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009e4:	e007      	b.n	80009f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ea:	f043 0210 	orr.w	r2, r3, #16
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	ffe1f7fd 	.word	0xffe1f7fd
 8000a04:	ff1f0efe 	.word	0xff1f0efe

08000a08 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d101      	bne.n	8000a22 <HAL_ADC_Start_IT+0x1a>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e0a0      	b.n	8000b64 <HAL_ADC_Start_IT+0x15c>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 fa6e 	bl	8000f0c <ADC_Enable>
 8000a30:	4603      	mov	r3, r0
 8000a32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 808f 	bne.w	8000b5a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a44:	f023 0301 	bic.w	r3, r3, #1
 8000a48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a45      	ldr	r2, [pc, #276]	@ (8000b6c <HAL_ADC_Start_IT+0x164>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d105      	bne.n	8000a66 <HAL_ADC_Start_IT+0x5e>
 8000a5a:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <HAL_ADC_Start_IT+0x168>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d115      	bne.n	8000a92 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d026      	beq.n	8000ace <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a90:	e01d      	b.n	8000ace <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a33      	ldr	r2, [pc, #204]	@ (8000b70 <HAL_ADC_Start_IT+0x168>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d004      	beq.n	8000ab2 <HAL_ADC_Start_IT+0xaa>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	@ (8000b6c <HAL_ADC_Start_IT+0x164>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10d      	bne.n	8000ace <HAL_ADC_Start_IT+0xc6>
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <HAL_ADC_Start_IT+0x168>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ac6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ade:	f023 0206 	bic.w	r2, r3, #6
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae6:	e002      	b.n	8000aee <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f06f 0202 	mvn.w	r2, #2
 8000afe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f042 0220 	orr.w	r2, r2, #32
 8000b0e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b1e:	d113      	bne.n	8000b48 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_ADC_Start_IT+0x164>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d105      	bne.n	8000b36 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_ADC_Start_IT+0x168>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	e00c      	b.n	8000b62 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	e003      	b.n	8000b62 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40012800 	.word	0x40012800
 8000b70:	40012400 	.word	0x40012400

08000b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d03e      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d039      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000bde:	d11d      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d119      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0220 	bic.w	r2, r2, #32
 8000bf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fbcd 	bl	80003bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f06f 0212 	mvn.w	r2, #18
 8000c2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d04d      	beq.n	8000cd2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d048      	beq.n	8000cd2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d105      	bne.n	8000c58 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000c62:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000c66:	d012      	beq.n	8000c8e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d125      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c80:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c84:	d11d      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d119      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c9c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d105      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f9bd 	bl	8001042 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f06f 020c 	mvn.w	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d012      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00d      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f809 	bl	8000d0a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f06f 0201 	mvn.w	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_ADC_ConfigChannel+0x20>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e0dc      	b.n	8000ef6 <HAL_ADC_ConfigChannel+0x1da>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d81c      	bhi.n	8000d86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3b05      	subs	r3, #5
 8000d5e:	221f      	movs	r2, #31
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4019      	ands	r1, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3b05      	subs	r3, #5
 8000d78:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d84:	e03c      	b.n	8000e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b0c      	cmp	r3, #12
 8000d8c:	d81c      	bhi.n	8000dc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b23      	subs	r3, #35	@ 0x23
 8000da0:	221f      	movs	r2, #31
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4019      	ands	r1, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b23      	subs	r3, #35	@ 0x23
 8000dba:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dc6:	e01b      	b.n	8000e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	@ 0x41
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b41      	subs	r3, #65	@ 0x41
 8000df4:	fa00 f203 	lsl.w	r2, r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d91c      	bls.n	8000e42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68d9      	ldr	r1, [r3, #12]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	3b1e      	subs	r3, #30
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4019      	ands	r1, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	3b1e      	subs	r3, #30
 8000e34:	fa00 f203 	lsl.w	r2, r0, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e019      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6919      	ldr	r1, [r3, #16]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	2207      	movs	r2, #7
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6898      	ldr	r0, [r3, #8]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d003      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e82:	2b11      	cmp	r3, #17
 8000e84:	d132      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f00 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d125      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d126      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000eac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d11a      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_ADC_ConfigChannel+0x1e8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a13      	ldr	r2, [pc, #76]	@ (8000f08 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	0c9a      	lsrs	r2, r3, #18
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ecc:	e002      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x1b2>
 8000eda:	e007      	b.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee0:	f043 0220 	orr.w	r2, r3, #32
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40012400 	.word	0x40012400
 8000f04:	20000004 	.word	0x20000004
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d040      	beq.n	8000fac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <ADC_Enable+0xac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fbc <ADC_Enable+0xb0>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f48:	e002      	b.n	8000f50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f56:	f7ff fc75 	bl	8000844 <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f5c:	e01f      	b.n	8000f9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f5e:	f7ff fc71 	bl	8000844 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d918      	bls.n	8000f9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d011      	beq.n	8000f9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7e:	f043 0210 	orr.w	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e007      	b.n	8000fae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1d8      	bne.n	8000f5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	431bde83 	.word	0x431bde83

08000fc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d12e      	bne.n	8001038 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fea:	f7ff fc2b 	bl	8000844 <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ff0:	e01b      	b.n	800102a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ff2:	f7ff fc27 	bl	8000844 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d914      	bls.n	800102a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d10d      	bne.n	800102a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e007      	b.n	800103a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d0dc      	beq.n	8000ff2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4906      	ldr	r1, [pc, #24]	@ (80010ec <__NVIC_EnableIRQ+0x34>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	@ (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	@ (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	@ 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff90 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff2d 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff42 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff35 	bl	80010b8 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2204      	movs	r2, #4
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e020      	b.n	80012da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d005      	beq.n	8001308 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2204      	movs	r2, #4
 8001300:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e051      	b.n	80013ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 020e 	bic.w	r2, r2, #14
 8001316:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <HAL_DMA_Abort_IT+0xd4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d029      	beq.n	8001386 <HAL_DMA_Abort_IT+0xa2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <HAL_DMA_Abort_IT+0xd8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d022      	beq.n	8001382 <HAL_DMA_Abort_IT+0x9e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <HAL_DMA_Abort_IT+0xdc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01a      	beq.n	800137c <HAL_DMA_Abort_IT+0x98>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <HAL_DMA_Abort_IT+0xe0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d012      	beq.n	8001376 <HAL_DMA_Abort_IT+0x92>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1c      	ldr	r2, [pc, #112]	@ (80013c8 <HAL_DMA_Abort_IT+0xe4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00a      	beq.n	8001370 <HAL_DMA_Abort_IT+0x8c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <HAL_DMA_Abort_IT+0xe8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d102      	bne.n	800136a <HAL_DMA_Abort_IT+0x86>
 8001364:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001368:	e00e      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 800136a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136e:	e00b      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 8001370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001374:	e008      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	e005      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 800137c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001380:	e002      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 8001382:	2310      	movs	r3, #16
 8001384:	e000      	b.n	8001388 <HAL_DMA_Abort_IT+0xa4>
 8001386:	2301      	movs	r3, #1
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_DMA_Abort_IT+0xec>)
 800138a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
    } 
  }
  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40020008 	.word	0x40020008
 80013bc:	4002001c 	.word	0x4002001c
 80013c0:	40020030 	.word	0x40020030
 80013c4:	40020044 	.word	0x40020044
 80013c8:	40020058 	.word	0x40020058
 80013cc:	4002006c 	.word	0x4002006c
 80013d0:	40020000 	.word	0x40020000

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b08b      	sub	sp, #44	@ 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e169      	b.n	80016bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e8:	2201      	movs	r2, #1
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8158 	bne.w	80016b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a9a      	ldr	r2, [pc, #616]	@ (8001674 <HAL_GPIO_Init+0x2a0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d05e      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001410:	4a98      	ldr	r2, [pc, #608]	@ (8001674 <HAL_GPIO_Init+0x2a0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d875      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001416:	4a98      	ldr	r2, [pc, #608]	@ (8001678 <HAL_GPIO_Init+0x2a4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d058      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 800141c:	4a96      	ldr	r2, [pc, #600]	@ (8001678 <HAL_GPIO_Init+0x2a4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d86f      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001422:	4a96      	ldr	r2, [pc, #600]	@ (800167c <HAL_GPIO_Init+0x2a8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d052      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001428:	4a94      	ldr	r2, [pc, #592]	@ (800167c <HAL_GPIO_Init+0x2a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d869      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800142e:	4a94      	ldr	r2, [pc, #592]	@ (8001680 <HAL_GPIO_Init+0x2ac>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04c      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001434:	4a92      	ldr	r2, [pc, #584]	@ (8001680 <HAL_GPIO_Init+0x2ac>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d863      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800143a:	4a92      	ldr	r2, [pc, #584]	@ (8001684 <HAL_GPIO_Init+0x2b0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d046      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001440:	4a90      	ldr	r2, [pc, #576]	@ (8001684 <HAL_GPIO_Init+0x2b0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d85d      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d82a      	bhi.n	80014a0 <HAL_GPIO_Init+0xcc>
 800144a:	2b12      	cmp	r3, #18
 800144c:	d859      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800144e:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <HAL_GPIO_Init+0x80>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	080014cf 	.word	0x080014cf
 8001458:	080014a9 	.word	0x080014a9
 800145c:	080014bb 	.word	0x080014bb
 8001460:	080014fd 	.word	0x080014fd
 8001464:	08001503 	.word	0x08001503
 8001468:	08001503 	.word	0x08001503
 800146c:	08001503 	.word	0x08001503
 8001470:	08001503 	.word	0x08001503
 8001474:	08001503 	.word	0x08001503
 8001478:	08001503 	.word	0x08001503
 800147c:	08001503 	.word	0x08001503
 8001480:	08001503 	.word	0x08001503
 8001484:	08001503 	.word	0x08001503
 8001488:	08001503 	.word	0x08001503
 800148c:	08001503 	.word	0x08001503
 8001490:	08001503 	.word	0x08001503
 8001494:	08001503 	.word	0x08001503
 8001498:	080014b1 	.word	0x080014b1
 800149c:	080014c5 	.word	0x080014c5
 80014a0:	4a79      	ldr	r2, [pc, #484]	@ (8001688 <HAL_GPIO_Init+0x2b4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a6:	e02c      	b.n	8001502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e029      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	3304      	adds	r3, #4
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e024      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	3308      	adds	r3, #8
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e01f      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	330c      	adds	r3, #12
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e01a      	b.n	8001504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d6:	2304      	movs	r3, #4
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e013      	b.n	8001504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d105      	bne.n	80014f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	611a      	str	r2, [r3, #16]
          break;
 80014ee:	e009      	b.n	8001504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f0:	2308      	movs	r3, #8
 80014f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	615a      	str	r2, [r3, #20]
          break;
 80014fa:	e003      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x130>
          break;
 8001502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	d801      	bhi.n	800150e <HAL_GPIO_Init+0x13a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_Init+0x13e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3304      	adds	r3, #4
 8001512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	@ 0xff
 8001518:	d802      	bhi.n	8001520 <HAL_GPIO_Init+0x14c>
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x152>
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	3b08      	subs	r3, #8
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	210f      	movs	r1, #15
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	401a      	ands	r2, r3
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80b1 	beq.w	80016b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001554:	4b4d      	ldr	r3, [pc, #308]	@ (800168c <HAL_GPIO_Init+0x2b8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <HAL_GPIO_Init+0x2b8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b4a      	ldr	r3, [pc, #296]	@ (800168c <HAL_GPIO_Init+0x2b8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800156c:	4a48      	ldr	r2, [pc, #288]	@ (8001690 <HAL_GPIO_Init+0x2bc>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a40      	ldr	r2, [pc, #256]	@ (8001694 <HAL_GPIO_Init+0x2c0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x1ec>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a3f      	ldr	r2, [pc, #252]	@ (8001698 <HAL_GPIO_Init+0x2c4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1e8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3e      	ldr	r2, [pc, #248]	@ (800169c <HAL_GPIO_Init+0x2c8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1e4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	@ (80016a0 <HAL_GPIO_Init+0x2cc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1e0>
 80015b0:	2303      	movs	r3, #3
 80015b2:	e006      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b4:	2304      	movs	r3, #4
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015c0:	2300      	movs	r3, #0
 80015c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d2:	492f      	ldr	r1, [pc, #188]	@ (8001690 <HAL_GPIO_Init+0x2bc>)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	492c      	ldr	r1, [pc, #176]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	4928      	ldr	r1, [pc, #160]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4922      	ldr	r1, [pc, #136]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	491e      	ldr	r1, [pc, #120]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4918      	ldr	r1, [pc, #96]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	4914      	ldr	r1, [pc, #80]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001654:	4013      	ands	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d021      	beq.n	80016a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	490e      	ldr	r1, [pc, #56]	@ (80016a4 <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e021      	b.n	80016b6 <HAL_GPIO_Init+0x2e2>
 8001672:	bf00      	nop
 8001674:	10320000 	.word	0x10320000
 8001678:	10310000 	.word	0x10310000
 800167c:	10220000 	.word	0x10220000
 8001680:	10210000 	.word	0x10210000
 8001684:	10120000 	.word	0x10120000
 8001688:	10110000 	.word	0x10110000
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40011000 	.word	0x40011000
 80016a0:	40011400 	.word	0x40011400
 80016a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	3301      	adds	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f47f ae8e 	bne.w	80013e8 <HAL_GPIO_Init+0x14>
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	372c      	adds	r7, #44	@ 0x2c
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e272      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8087 	beq.w	800180a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016fc:	4b92      	ldr	r3, [pc, #584]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b04      	cmp	r3, #4
 8001706:	d00c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001708:	4b8f      	ldr	r3, [pc, #572]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d112      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
 8001714:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001720:	d10b      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06c      	beq.n	8001808 <HAL_RCC_OscConfig+0x12c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d168      	bne.n	8001808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e24c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x76>
 8001744:	4b80      	ldr	r3, [pc, #512]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7f      	ldr	r2, [pc, #508]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800174a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e02e      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b7b      	ldr	r3, [pc, #492]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7a      	ldr	r2, [pc, #488]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a77      	ldr	r2, [pc, #476]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0xbc>
 800177e:	4b72      	ldr	r3, [pc, #456]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a71      	ldr	r2, [pc, #452]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001798:	4b6b      	ldr	r3, [pc, #428]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6a      	ldr	r2, [pc, #424]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b68      	ldr	r3, [pc, #416]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a67      	ldr	r2, [pc, #412]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff f844 	bl	8000844 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff f840 	bl	8000844 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e200      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xe4>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff f830 	bl	8000844 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff f82c 	bl	8000844 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1ec      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x10c>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001816:	4b4c      	ldr	r3, [pc, #304]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001822:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
 800182e:	4b46      	ldr	r3, [pc, #280]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b43      	ldr	r3, [pc, #268]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4939      	ldr	r1, [pc, #228]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b36      	ldr	r3, [pc, #216]	@ (800194c <HAL_RCC_OscConfig+0x270>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7fe ffe5 	bl	8000844 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7fe ffe1 	bl	8000844 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1a1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4927      	ldr	r1, [pc, #156]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <HAL_RCC_OscConfig+0x270>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7fe ffc4 	bl	8000844 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7fe ffc0 	bl	8000844 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e180      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03a      	beq.n	8001960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_RCC_OscConfig+0x274>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7fe ffa4 	bl	8000844 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7fe ffa0 	bl	8000844 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e160      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f000 face 	bl	8001ec0 <RCC_Delay>
 8001924:	e01c      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_RCC_OscConfig+0x274>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7fe ff8a 	bl	8000844 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001932:	e00f      	b.n	8001954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7fe ff86 	bl	8000844 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d908      	bls.n	8001954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e146      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	42420000 	.word	0x42420000
 8001950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b92      	ldr	r3, [pc, #584]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e9      	bne.n	8001934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a6 	beq.w	8001aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b88      	ldr	r3, [pc, #544]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a87      	ldr	r2, [pc, #540]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b82      	ldr	r3, [pc, #520]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7fe ff47 	bl	8000844 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7fe ff43 	bl	8000844 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b64      	cmp	r3, #100	@ 0x64
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e103      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b75      	ldr	r3, [pc, #468]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x312>
 80019e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e02d      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x334>
 80019f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b67      	ldr	r3, [pc, #412]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a66      	ldr	r2, [pc, #408]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	e01c      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x356>
 8001a18:	4b61      	ldr	r3, [pc, #388]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b58      	ldr	r3, [pc, #352]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a57      	ldr	r2, [pc, #348]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7fe fef7 	bl	8000844 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fef3 	bl	8000844 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0b1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ee      	beq.n	8001a5a <HAL_RCC_OscConfig+0x37e>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fee1 	bl	8000844 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7fe fedd 	bl	8000844 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e09b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d061      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d146      	bne.n	8001b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7fe feb1 	bl	8000844 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7fe fead 	bl	8000844 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e06d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d108      	bne.n	8001b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4921      	ldr	r1, [pc, #132]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a19      	ldr	r1, [r3, #32]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	430b      	orrs	r3, r1
 8001b32:	491b      	ldr	r1, [pc, #108]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7fe fe81 	bl	8000844 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe fe7d 	bl	8000844 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e03d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46a>
 8001b64:	e035      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7fe fe6a 	bl	8000844 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7fe fe66 	bl	8000844 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e026      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x498>
 8001b92:	e01e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e019      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x500>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0d0      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b67      	ldr	r3, [pc, #412]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4965      	ldr	r1, [pc, #404]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b50      	ldr	r3, [pc, #320]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	494d      	ldr	r1, [pc, #308]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d040      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e073      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4936      	ldr	r1, [pc, #216]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7fe fdb8 	bl	8000844 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7fe fdb4 	bl	8000844 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e053      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d210      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	4922      	ldr	r1, [pc, #136]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e032      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4916      	ldr	r1, [pc, #88]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f821 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490a      	ldr	r1, [pc, #40]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a09      	ldr	r2, [pc, #36]	@ (8001dac <HAL_RCC_ClockConfig+0x1cc>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fd16 	bl	80007c0 <HAL_InitTick>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	0800384c 	.word	0x0800384c
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000008 	.word	0x20000008

08001db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x36>
 8001de2:	e027      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	613b      	str	r3, [r7, #16]
      break;
 8001de8:	e027      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a17      	ldr	r2, [pc, #92]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0c5b      	lsrs	r3, r3, #17
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	fb03 f202 	mul.w	r2, r3, r2
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e004      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	613b      	str	r3, [r7, #16]
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e36:	613b      	str	r3, [r7, #16]
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	693b      	ldr	r3, [r7, #16]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	08003864 	.word	0x08003864
 8001e54:	08003874 	.word	0x08003874
 8001e58:	003d0900 	.word	0x003d0900

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff2 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	0800385c 	.word	0x0800385c

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	@ (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800385c 	.word	0x0800385c

08001ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <RCC_Delay+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <RCC_Delay+0x38>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001edc:	bf00      	nop
  }
  while (Delay --);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <RCC_Delay+0x1c>
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d07d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b49      	ldr	r3, [pc, #292]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f50:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a42      	ldr	r2, [pc, #264]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fc72 	bl	8000844 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fc6e 	bl	8000844 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06d      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02e      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d027      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fb6:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fc3d 	bl	8000844 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fc39 	bl	8000844 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e036      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4917      	ldr	r1, [pc, #92]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a13      	ldr	r2, [pc, #76]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	490b      	ldr	r1, [pc, #44]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4904      	ldr	r1, [pc, #16]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420440 	.word	0x42420440

08002068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e042      	b.n	8002100 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fa8a 	bl	80005a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	@ 0x24
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fdb7 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	d175      	bne.n	8002214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_UART_Transmit+0x2c>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e06e      	b.n	8002216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	@ 0x21
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002146:	f7fe fb7d 	bl	8000844 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002160:	d108      	bne.n	8002174 <HAL_UART_Transmit+0x6c>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e003      	b.n	800217c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800217c:	e02e      	b.n	80021dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fb1c 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e03a      	b.n	8002216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3302      	adds	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e007      	b.n	80021ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cb      	bne.n	800217e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2140      	movs	r1, #64	@ 0x40
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fae8 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e006      	b.n	8002216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	4613      	mov	r3, r2
 800222a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b20      	cmp	r3, #32
 8002236:	d112      	bne.n	800225e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Receive_IT+0x26>
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e00b      	b.n	8002260 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	461a      	mov	r2, r3
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fb0f 	bl	8002878 <UART_Start_Receive_IT>
 800225a:	4603      	mov	r3, r0
 800225c:	e000      	b.n	8002260 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0ba      	sub	sp, #232	@ 0xe8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80022a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_UART_IRQHandler+0x66>
 80022ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fbec 	bl	8002aa4 <UART_Receive_IT>
      return;
 80022cc:	e25b      	b.n	8002786 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80de 	beq.w	8002494 <HAL_UART_IRQHandler+0x22c>
 80022d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80d1 	beq.w	8002494 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_UART_IRQHandler+0xae>
 80022fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_UART_IRQHandler+0xd2>
 8002322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_UART_IRQHandler+0xf6>
 8002346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f043 0204 	orr.w	r2, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d011      	beq.n	800238e <HAL_UART_IRQHandler+0x126>
 800236a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f043 0208 	orr.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 81f2 	beq.w	800277c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_UART_IRQHandler+0x14e>
 80023a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fb77 	bl	8002aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_UART_IRQHandler+0x17a>
 80023da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d04f      	beq.n	8002482 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa81 	bl	80028ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d041      	beq.n	800247a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3314      	adds	r3, #20
 80023fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800240c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800242e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002432:	e841 2300 	strex	r3, r2, [r1]
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800243a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1d9      	bne.n	80023f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	4a7e      	ldr	r2, [pc, #504]	@ (8002648 <HAL_UART_IRQHandler+0x3e0>)
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ff44 	bl	80012e4 <HAL_DMA_Abort_IT>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800246c:	4610      	mov	r0, r2
 800246e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002470:	e00e      	b.n	8002490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f993 	bl	800279e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002478:	e00a      	b.n	8002490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f98f 	bl	800279e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002480:	e006      	b.n	8002490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f98b 	bl	800279e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800248e:	e175      	b.n	800277c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	bf00      	nop
    return;
 8002492:	e173      	b.n	800277c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 814f 	bne.w	800273c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8148 	beq.w	800273c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8141 	beq.w	800273c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80b6 	beq.w	800264c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8145 	beq.w	8002780 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024fe:	429a      	cmp	r2, r3
 8002500:	f080 813e 	bcs.w	8002780 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800250a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b20      	cmp	r3, #32
 8002514:	f000 8088 	beq.w	8002628 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800252e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002544:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002550:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1d9      	bne.n	8002518 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3314      	adds	r3, #20
 800256a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800256e:	e853 3f00 	ldrex	r3, [r3]
 8002572:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002588:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800258c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002590:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800259a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e1      	bne.n	8002564 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e3      	bne.n	80025a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025f8:	f023 0310 	bic.w	r3, r3, #16
 80025fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800260a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800260c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e3      	bne.n	80025e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fe23 	bl	800126e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002636:	b29b      	uxth	r3, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8b6 	bl	80027b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002644:	e09c      	b.n	8002780 <HAL_UART_IRQHandler+0x518>
 8002646:	bf00      	nop
 8002648:	080029af 	.word	0x080029af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 808e 	beq.w	8002784 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8089 	beq.w	8002784 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002696:	647a      	str	r2, [r7, #68]	@ 0x44
 8002698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800269c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e3      	bne.n	8002672 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3314      	adds	r3, #20
 80026ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e3      	bne.n	80026aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0310 	bic.w	r3, r3, #16
 8002706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002714:	61fa      	str	r2, [r7, #28]
 8002716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	617b      	str	r3, [r7, #20]
   return(result);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e3      	bne.n	80026f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800272e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f83b 	bl	80027b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800273a:	e023      	b.n	8002784 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_UART_IRQHandler+0x4f4>
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f93e 	bl	80029d6 <UART_Transmit_IT>
    return;
 800275a:	e014      	b.n	8002786 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_UART_IRQHandler+0x51e>
 8002768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f97d 	bl	8002a74 <UART_EndTransmit_IT>
    return;
 800277a:	e004      	b.n	8002786 <HAL_UART_IRQHandler+0x51e>
    return;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <HAL_UART_IRQHandler+0x51e>
      return;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_UART_IRQHandler+0x51e>
      return;
 8002784:	bf00      	nop
  }
}
 8002786:	37e8      	adds	r7, #232	@ 0xe8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	e03b      	b.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d037      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7fe f830 	bl	8000844 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03a      	b.n	8002870 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d023      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b80      	cmp	r3, #128	@ 0x80
 800280c:	d020      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b40      	cmp	r3, #64	@ 0x40
 8002812:	d01d      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d116      	bne.n	8002850 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f856 	bl	80028ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2208      	movs	r2, #8
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e00f      	b.n	8002870 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	429a      	cmp	r2, r3
 800286c:	d0b4      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2222      	movs	r2, #34	@ 0x22
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0220 	orr.w	r2, r2, #32
 80028dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b095      	sub	sp, #84	@ 0x54
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002912:	643a      	str	r2, [r7, #64]	@ 0x40
 8002914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e5      	bne.n	80028f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	61fb      	str	r3, [r7, #28]
   return(result);
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800294c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	2b01      	cmp	r3, #1
 8002960:	d119      	bne.n	8002996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	60bb      	str	r3, [r7, #8]
   return(result);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f023 0310 	bic.w	r3, r3, #16
 8002978:	647b      	str	r3, [r7, #68]	@ 0x44
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002982:	61ba      	str	r2, [r7, #24]
 8002984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	613b      	str	r3, [r7, #16]
   return(result);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e5      	bne.n	8002962 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029a4:	bf00      	nop
 80029a6:	3754      	adds	r7, #84	@ 0x54
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fee8 	bl	800279e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b21      	cmp	r3, #33	@ 0x21
 80029e8:	d13e      	bne.n	8002a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f2:	d114      	bne.n	8002a1e <UART_Transmit_IT+0x48>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d110      	bne.n	8002a1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	1c9a      	adds	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	621a      	str	r2, [r3, #32]
 8002a1c:	e008      	b.n	8002a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	1c59      	adds	r1, r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6211      	str	r1, [r2, #32]
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fe79 	bl	800278c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b22      	cmp	r3, #34	@ 0x22
 8002ab6:	f040 80ae 	bne.w	8002c16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac2:	d117      	bne.n	8002af4 <UART_Receive_IT+0x50>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	1c9a      	adds	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002af2:	e026      	b.n	8002b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b06:	d007      	beq.n	8002b18 <UART_Receive_IT+0x74>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <UART_Receive_IT+0x82>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e008      	b.n	8002b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15d      	bne.n	8002c12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0220 	bic.w	r2, r2, #32
 8002b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d135      	bne.n	8002c08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f023 0310 	bic.w	r3, r3, #16
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc2:	623a      	str	r2, [r7, #32]
 8002bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	69f9      	ldr	r1, [r7, #28]
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d10a      	bne.n	8002bfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fdd5 	bl	80027b0 <HAL_UARTEx_RxEventCallback>
 8002c06:	e002      	b.n	8002c0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fd fb9d 	bl	8000348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e002      	b.n	8002c18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3730      	adds	r7, #48	@ 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c5a:	f023 030c 	bic.w	r3, r3, #12
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <UART_SetConfig+0x114>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff f906 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	e002      	b.n	8002c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff f8ee 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <UART_SetConfig+0x118>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	0119      	lsls	r1, r3, #4
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <UART_SetConfig+0x118>)
 8002cce:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2064      	movs	r0, #100	@ 0x64
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	@ 0x32
 8002ce0:	4a15      	ldr	r2, [pc, #84]	@ (8002d38 <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cec:	4419      	add	r1, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <UART_SetConfig+0x118>)
 8002d06:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2064      	movs	r0, #100	@ 0x64
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	@ 0x32
 8002d18:	4a07      	ldr	r2, [pc, #28]	@ (8002d38 <UART_SetConfig+0x118>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	440a      	add	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013800 	.word	0x40013800
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <atoi>:
 8002d3c:	220a      	movs	r2, #10
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f000 b87a 	b.w	8002e38 <strtol>

08002d44 <_strtol_l.constprop.0>:
 8002d44:	2b24      	cmp	r3, #36	@ 0x24
 8002d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d4a:	4686      	mov	lr, r0
 8002d4c:	4690      	mov	r8, r2
 8002d4e:	d801      	bhi.n	8002d54 <_strtol_l.constprop.0+0x10>
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <_strtol_l.constprop.0+0x1e>
 8002d54:	f000 f8b6 	bl	8002ec4 <__errno>
 8002d58:	2316      	movs	r3, #22
 8002d5a:	6003      	str	r3, [r0, #0]
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d62:	460d      	mov	r5, r1
 8002d64:	4833      	ldr	r0, [pc, #204]	@ (8002e34 <_strtol_l.constprop.0+0xf0>)
 8002d66:	462a      	mov	r2, r5
 8002d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d6c:	5d06      	ldrb	r6, [r0, r4]
 8002d6e:	f016 0608 	ands.w	r6, r6, #8
 8002d72:	d1f8      	bne.n	8002d66 <_strtol_l.constprop.0+0x22>
 8002d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8002d76:	d12d      	bne.n	8002dd4 <_strtol_l.constprop.0+0x90>
 8002d78:	2601      	movs	r6, #1
 8002d7a:	782c      	ldrb	r4, [r5, #0]
 8002d7c:	1c95      	adds	r5, r2, #2
 8002d7e:	f033 0210 	bics.w	r2, r3, #16
 8002d82:	d109      	bne.n	8002d98 <_strtol_l.constprop.0+0x54>
 8002d84:	2c30      	cmp	r4, #48	@ 0x30
 8002d86:	d12a      	bne.n	8002dde <_strtol_l.constprop.0+0x9a>
 8002d88:	782a      	ldrb	r2, [r5, #0]
 8002d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002d8e:	2a58      	cmp	r2, #88	@ 0x58
 8002d90:	d125      	bne.n	8002dde <_strtol_l.constprop.0+0x9a>
 8002d92:	2310      	movs	r3, #16
 8002d94:	786c      	ldrb	r4, [r5, #1]
 8002d96:	3502      	adds	r5, #2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002d9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002da2:	fbbc f9f3 	udiv	r9, ip, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8002dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002db0:	2f09      	cmp	r7, #9
 8002db2:	d81b      	bhi.n	8002dec <_strtol_l.constprop.0+0xa8>
 8002db4:	463c      	mov	r4, r7
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	dd27      	ble.n	8002e0a <_strtol_l.constprop.0+0xc6>
 8002dba:	1c57      	adds	r7, r2, #1
 8002dbc:	d007      	beq.n	8002dce <_strtol_l.constprop.0+0x8a>
 8002dbe:	4581      	cmp	r9, r0
 8002dc0:	d320      	bcc.n	8002e04 <_strtol_l.constprop.0+0xc0>
 8002dc2:	d101      	bne.n	8002dc8 <_strtol_l.constprop.0+0x84>
 8002dc4:	45a2      	cmp	sl, r4
 8002dc6:	db1d      	blt.n	8002e04 <_strtol_l.constprop.0+0xc0>
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fb00 4003 	mla	r0, r0, r3, r4
 8002dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dd2:	e7eb      	b.n	8002dac <_strtol_l.constprop.0+0x68>
 8002dd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8002dd6:	bf04      	itt	eq
 8002dd8:	782c      	ldrbeq	r4, [r5, #0]
 8002dda:	1c95      	addeq	r5, r2, #2
 8002ddc:	e7cf      	b.n	8002d7e <_strtol_l.constprop.0+0x3a>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1da      	bne.n	8002d98 <_strtol_l.constprop.0+0x54>
 8002de2:	2c30      	cmp	r4, #48	@ 0x30
 8002de4:	bf0c      	ite	eq
 8002de6:	2308      	moveq	r3, #8
 8002de8:	230a      	movne	r3, #10
 8002dea:	e7d5      	b.n	8002d98 <_strtol_l.constprop.0+0x54>
 8002dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002df0:	2f19      	cmp	r7, #25
 8002df2:	d801      	bhi.n	8002df8 <_strtol_l.constprop.0+0xb4>
 8002df4:	3c37      	subs	r4, #55	@ 0x37
 8002df6:	e7de      	b.n	8002db6 <_strtol_l.constprop.0+0x72>
 8002df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002dfc:	2f19      	cmp	r7, #25
 8002dfe:	d804      	bhi.n	8002e0a <_strtol_l.constprop.0+0xc6>
 8002e00:	3c57      	subs	r4, #87	@ 0x57
 8002e02:	e7d8      	b.n	8002db6 <_strtol_l.constprop.0+0x72>
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	e7e1      	b.n	8002dce <_strtol_l.constprop.0+0x8a>
 8002e0a:	1c53      	adds	r3, r2, #1
 8002e0c:	d108      	bne.n	8002e20 <_strtol_l.constprop.0+0xdc>
 8002e0e:	2322      	movs	r3, #34	@ 0x22
 8002e10:	4660      	mov	r0, ip
 8002e12:	f8ce 3000 	str.w	r3, [lr]
 8002e16:	f1b8 0f00 	cmp.w	r8, #0
 8002e1a:	d0a0      	beq.n	8002d5e <_strtol_l.constprop.0+0x1a>
 8002e1c:	1e69      	subs	r1, r5, #1
 8002e1e:	e006      	b.n	8002e2e <_strtol_l.constprop.0+0xea>
 8002e20:	b106      	cbz	r6, 8002e24 <_strtol_l.constprop.0+0xe0>
 8002e22:	4240      	negs	r0, r0
 8002e24:	f1b8 0f00 	cmp.w	r8, #0
 8002e28:	d099      	beq.n	8002d5e <_strtol_l.constprop.0+0x1a>
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d1f6      	bne.n	8002e1c <_strtol_l.constprop.0+0xd8>
 8002e2e:	f8c8 1000 	str.w	r1, [r8]
 8002e32:	e794      	b.n	8002d5e <_strtol_l.constprop.0+0x1a>
 8002e34:	08003877 	.word	0x08003877

08002e38 <strtol>:
 8002e38:	4613      	mov	r3, r2
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <strtol+0x10>)
 8002e40:	6800      	ldr	r0, [r0, #0]
 8002e42:	f7ff bf7f 	b.w	8002d44 <_strtol_l.constprop.0>
 8002e46:	bf00      	nop
 8002e48:	20000010 	.word	0x20000010

08002e4c <sniprintf>:
 8002e4c:	b40c      	push	{r2, r3}
 8002e4e:	b530      	push	{r4, r5, lr}
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <sniprintf+0x64>)
 8002e52:	1e0c      	subs	r4, r1, #0
 8002e54:	681d      	ldr	r5, [r3, #0]
 8002e56:	b09d      	sub	sp, #116	@ 0x74
 8002e58:	da08      	bge.n	8002e6c <sniprintf+0x20>
 8002e5a:	238b      	movs	r3, #139	@ 0x8b
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	602b      	str	r3, [r5, #0]
 8002e62:	b01d      	add	sp, #116	@ 0x74
 8002e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e68:	b002      	add	sp, #8
 8002e6a:	4770      	bx	lr
 8002e6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e74:	bf0c      	ite	eq
 8002e76:	4623      	moveq	r3, r4
 8002e78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	9307      	str	r3, [sp, #28]
 8002e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e84:	9002      	str	r0, [sp, #8]
 8002e86:	9006      	str	r0, [sp, #24]
 8002e88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	ab21      	add	r3, sp, #132	@ 0x84
 8002e90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e92:	a902      	add	r1, sp, #8
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	f000 f993 	bl	80031c0 <_svfiprintf_r>
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	bfbc      	itt	lt
 8002e9e:	238b      	movlt	r3, #139	@ 0x8b
 8002ea0:	602b      	strlt	r3, [r5, #0]
 8002ea2:	2c00      	cmp	r4, #0
 8002ea4:	d0dd      	beq.n	8002e62 <sniprintf+0x16>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	9b02      	ldr	r3, [sp, #8]
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e7d9      	b.n	8002e62 <sniprintf+0x16>
 8002eae:	bf00      	nop
 8002eb0:	20000010 	.word	0x20000010

08002eb4 <memset>:
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4402      	add	r2, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	@ (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000010 	.word	0x20000010

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	4d0c      	ldr	r5, [pc, #48]	@ (8002f08 <__libc_init_array+0x38>)
 8002ed6:	4c0d      	ldr	r4, [pc, #52]	@ (8002f0c <__libc_init_array+0x3c>)
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	f000 fc78 	bl	80037d4 <_init>
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	4d0a      	ldr	r5, [pc, #40]	@ (8002f10 <__libc_init_array+0x40>)
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f14 <__libc_init_array+0x44>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	080039ac 	.word	0x080039ac
 8002f0c:	080039ac 	.word	0x080039ac
 8002f10:	080039ac 	.word	0x080039ac
 8002f14:	080039b0 	.word	0x080039b0

08002f18 <__retarget_lock_acquire_recursive>:
 8002f18:	4770      	bx	lr

08002f1a <__retarget_lock_release_recursive>:
 8002f1a:	4770      	bx	lr

08002f1c <_free_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4605      	mov	r5, r0
 8002f20:	2900      	cmp	r1, #0
 8002f22:	d040      	beq.n	8002fa6 <_free_r+0x8a>
 8002f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f28:	1f0c      	subs	r4, r1, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfb8      	it	lt
 8002f2e:	18e4      	addlt	r4, r4, r3
 8002f30:	f000 f8de 	bl	80030f0 <__malloc_lock>
 8002f34:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <_free_r+0x8c>)
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	b933      	cbnz	r3, 8002f48 <_free_r+0x2c>
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	6014      	str	r4, [r2, #0]
 8002f3e:	4628      	mov	r0, r5
 8002f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f44:	f000 b8da 	b.w	80030fc <__malloc_unlock>
 8002f48:	42a3      	cmp	r3, r4
 8002f4a:	d908      	bls.n	8002f5e <_free_r+0x42>
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	1821      	adds	r1, r4, r0
 8002f50:	428b      	cmp	r3, r1
 8002f52:	bf01      	itttt	eq
 8002f54:	6819      	ldreq	r1, [r3, #0]
 8002f56:	685b      	ldreq	r3, [r3, #4]
 8002f58:	1809      	addeq	r1, r1, r0
 8002f5a:	6021      	streq	r1, [r4, #0]
 8002f5c:	e7ed      	b.n	8002f3a <_free_r+0x1e>
 8002f5e:	461a      	mov	r2, r3
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b10b      	cbz	r3, 8002f68 <_free_r+0x4c>
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	d9fa      	bls.n	8002f5e <_free_r+0x42>
 8002f68:	6811      	ldr	r1, [r2, #0]
 8002f6a:	1850      	adds	r0, r2, r1
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	d10b      	bne.n	8002f88 <_free_r+0x6c>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	4401      	add	r1, r0
 8002f74:	1850      	adds	r0, r2, r1
 8002f76:	4283      	cmp	r3, r0
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	d1e0      	bne.n	8002f3e <_free_r+0x22>
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4408      	add	r0, r1
 8002f82:	6010      	str	r0, [r2, #0]
 8002f84:	6053      	str	r3, [r2, #4]
 8002f86:	e7da      	b.n	8002f3e <_free_r+0x22>
 8002f88:	d902      	bls.n	8002f90 <_free_r+0x74>
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	e7d6      	b.n	8002f3e <_free_r+0x22>
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	1821      	adds	r1, r4, r0
 8002f94:	428b      	cmp	r3, r1
 8002f96:	bf01      	itttt	eq
 8002f98:	6819      	ldreq	r1, [r3, #0]
 8002f9a:	685b      	ldreq	r3, [r3, #4]
 8002f9c:	1809      	addeq	r1, r1, r0
 8002f9e:	6021      	streq	r1, [r4, #0]
 8002fa0:	6063      	str	r3, [r4, #4]
 8002fa2:	6054      	str	r4, [r2, #4]
 8002fa4:	e7cb      	b.n	8002f3e <_free_r+0x22>
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	20000250 	.word	0x20000250

08002fac <sbrk_aligned>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4e0f      	ldr	r6, [pc, #60]	@ (8002fec <sbrk_aligned+0x40>)
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	6831      	ldr	r1, [r6, #0]
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	b911      	cbnz	r1, 8002fbe <sbrk_aligned+0x12>
 8002fb8:	f000 fbaa 	bl	8003710 <_sbrk_r>
 8002fbc:	6030      	str	r0, [r6, #0]
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 fba5 	bl	8003710 <_sbrk_r>
 8002fc6:	1c43      	adds	r3, r0, #1
 8002fc8:	d103      	bne.n	8002fd2 <sbrk_aligned+0x26>
 8002fca:	f04f 34ff 	mov.w	r4, #4294967295
 8002fce:	4620      	mov	r0, r4
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	1cc4      	adds	r4, r0, #3
 8002fd4:	f024 0403 	bic.w	r4, r4, #3
 8002fd8:	42a0      	cmp	r0, r4
 8002fda:	d0f8      	beq.n	8002fce <sbrk_aligned+0x22>
 8002fdc:	1a21      	subs	r1, r4, r0
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f000 fb96 	bl	8003710 <_sbrk_r>
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	d1f2      	bne.n	8002fce <sbrk_aligned+0x22>
 8002fe8:	e7ef      	b.n	8002fca <sbrk_aligned+0x1e>
 8002fea:	bf00      	nop
 8002fec:	2000024c 	.word	0x2000024c

08002ff0 <_malloc_r>:
 8002ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	1ccd      	adds	r5, r1, #3
 8002ff6:	f025 0503 	bic.w	r5, r5, #3
 8002ffa:	3508      	adds	r5, #8
 8002ffc:	2d0c      	cmp	r5, #12
 8002ffe:	bf38      	it	cc
 8003000:	250c      	movcc	r5, #12
 8003002:	2d00      	cmp	r5, #0
 8003004:	4606      	mov	r6, r0
 8003006:	db01      	blt.n	800300c <_malloc_r+0x1c>
 8003008:	42a9      	cmp	r1, r5
 800300a:	d904      	bls.n	8003016 <_malloc_r+0x26>
 800300c:	230c      	movs	r3, #12
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	2000      	movs	r0, #0
 8003012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030ec <_malloc_r+0xfc>
 800301a:	f000 f869 	bl	80030f0 <__malloc_lock>
 800301e:	f8d8 3000 	ldr.w	r3, [r8]
 8003022:	461c      	mov	r4, r3
 8003024:	bb44      	cbnz	r4, 8003078 <_malloc_r+0x88>
 8003026:	4629      	mov	r1, r5
 8003028:	4630      	mov	r0, r6
 800302a:	f7ff ffbf 	bl	8002fac <sbrk_aligned>
 800302e:	1c43      	adds	r3, r0, #1
 8003030:	4604      	mov	r4, r0
 8003032:	d158      	bne.n	80030e6 <_malloc_r+0xf6>
 8003034:	f8d8 4000 	ldr.w	r4, [r8]
 8003038:	4627      	mov	r7, r4
 800303a:	2f00      	cmp	r7, #0
 800303c:	d143      	bne.n	80030c6 <_malloc_r+0xd6>
 800303e:	2c00      	cmp	r4, #0
 8003040:	d04b      	beq.n	80030da <_malloc_r+0xea>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	4639      	mov	r1, r7
 8003046:	4630      	mov	r0, r6
 8003048:	eb04 0903 	add.w	r9, r4, r3
 800304c:	f000 fb60 	bl	8003710 <_sbrk_r>
 8003050:	4581      	cmp	r9, r0
 8003052:	d142      	bne.n	80030da <_malloc_r+0xea>
 8003054:	6821      	ldr	r1, [r4, #0]
 8003056:	4630      	mov	r0, r6
 8003058:	1a6d      	subs	r5, r5, r1
 800305a:	4629      	mov	r1, r5
 800305c:	f7ff ffa6 	bl	8002fac <sbrk_aligned>
 8003060:	3001      	adds	r0, #1
 8003062:	d03a      	beq.n	80030da <_malloc_r+0xea>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	442b      	add	r3, r5
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	f8d8 3000 	ldr.w	r3, [r8]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	bb62      	cbnz	r2, 80030cc <_malloc_r+0xdc>
 8003072:	f8c8 7000 	str.w	r7, [r8]
 8003076:	e00f      	b.n	8003098 <_malloc_r+0xa8>
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	1b52      	subs	r2, r2, r5
 800307c:	d420      	bmi.n	80030c0 <_malloc_r+0xd0>
 800307e:	2a0b      	cmp	r2, #11
 8003080:	d917      	bls.n	80030b2 <_malloc_r+0xc2>
 8003082:	1961      	adds	r1, r4, r5
 8003084:	42a3      	cmp	r3, r4
 8003086:	6025      	str	r5, [r4, #0]
 8003088:	bf18      	it	ne
 800308a:	6059      	strne	r1, [r3, #4]
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	bf08      	it	eq
 8003090:	f8c8 1000 	streq.w	r1, [r8]
 8003094:	5162      	str	r2, [r4, r5]
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	4630      	mov	r0, r6
 800309a:	f000 f82f 	bl	80030fc <__malloc_unlock>
 800309e:	f104 000b 	add.w	r0, r4, #11
 80030a2:	1d23      	adds	r3, r4, #4
 80030a4:	f020 0007 	bic.w	r0, r0, #7
 80030a8:	1ac2      	subs	r2, r0, r3
 80030aa:	bf1c      	itt	ne
 80030ac:	1a1b      	subne	r3, r3, r0
 80030ae:	50a3      	strne	r3, [r4, r2]
 80030b0:	e7af      	b.n	8003012 <_malloc_r+0x22>
 80030b2:	6862      	ldr	r2, [r4, #4]
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	bf0c      	ite	eq
 80030b8:	f8c8 2000 	streq.w	r2, [r8]
 80030bc:	605a      	strne	r2, [r3, #4]
 80030be:	e7eb      	b.n	8003098 <_malloc_r+0xa8>
 80030c0:	4623      	mov	r3, r4
 80030c2:	6864      	ldr	r4, [r4, #4]
 80030c4:	e7ae      	b.n	8003024 <_malloc_r+0x34>
 80030c6:	463c      	mov	r4, r7
 80030c8:	687f      	ldr	r7, [r7, #4]
 80030ca:	e7b6      	b.n	800303a <_malloc_r+0x4a>
 80030cc:	461a      	mov	r2, r3
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	42a3      	cmp	r3, r4
 80030d2:	d1fb      	bne.n	80030cc <_malloc_r+0xdc>
 80030d4:	2300      	movs	r3, #0
 80030d6:	6053      	str	r3, [r2, #4]
 80030d8:	e7de      	b.n	8003098 <_malloc_r+0xa8>
 80030da:	230c      	movs	r3, #12
 80030dc:	4630      	mov	r0, r6
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f000 f80c 	bl	80030fc <__malloc_unlock>
 80030e4:	e794      	b.n	8003010 <_malloc_r+0x20>
 80030e6:	6005      	str	r5, [r0, #0]
 80030e8:	e7d6      	b.n	8003098 <_malloc_r+0xa8>
 80030ea:	bf00      	nop
 80030ec:	20000250 	.word	0x20000250

080030f0 <__malloc_lock>:
 80030f0:	4801      	ldr	r0, [pc, #4]	@ (80030f8 <__malloc_lock+0x8>)
 80030f2:	f7ff bf11 	b.w	8002f18 <__retarget_lock_acquire_recursive>
 80030f6:	bf00      	nop
 80030f8:	20000248 	.word	0x20000248

080030fc <__malloc_unlock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	@ (8003104 <__malloc_unlock+0x8>)
 80030fe:	f7ff bf0c 	b.w	8002f1a <__retarget_lock_release_recursive>
 8003102:	bf00      	nop
 8003104:	20000248 	.word	0x20000248

08003108 <__ssputs_r>:
 8003108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800310c:	461f      	mov	r7, r3
 800310e:	688e      	ldr	r6, [r1, #8]
 8003110:	4682      	mov	sl, r0
 8003112:	42be      	cmp	r6, r7
 8003114:	460c      	mov	r4, r1
 8003116:	4690      	mov	r8, r2
 8003118:	680b      	ldr	r3, [r1, #0]
 800311a:	d82d      	bhi.n	8003178 <__ssputs_r+0x70>
 800311c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003120:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003124:	d026      	beq.n	8003174 <__ssputs_r+0x6c>
 8003126:	6965      	ldr	r5, [r4, #20]
 8003128:	6909      	ldr	r1, [r1, #16]
 800312a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800312e:	eba3 0901 	sub.w	r9, r3, r1
 8003132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003136:	1c7b      	adds	r3, r7, #1
 8003138:	444b      	add	r3, r9
 800313a:	106d      	asrs	r5, r5, #1
 800313c:	429d      	cmp	r5, r3
 800313e:	bf38      	it	cc
 8003140:	461d      	movcc	r5, r3
 8003142:	0553      	lsls	r3, r2, #21
 8003144:	d527      	bpl.n	8003196 <__ssputs_r+0x8e>
 8003146:	4629      	mov	r1, r5
 8003148:	f7ff ff52 	bl	8002ff0 <_malloc_r>
 800314c:	4606      	mov	r6, r0
 800314e:	b360      	cbz	r0, 80031aa <__ssputs_r+0xa2>
 8003150:	464a      	mov	r2, r9
 8003152:	6921      	ldr	r1, [r4, #16]
 8003154:	f000 fafa 	bl	800374c <memcpy>
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800315e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	6126      	str	r6, [r4, #16]
 8003166:	444e      	add	r6, r9
 8003168:	6026      	str	r6, [r4, #0]
 800316a:	463e      	mov	r6, r7
 800316c:	6165      	str	r5, [r4, #20]
 800316e:	eba5 0509 	sub.w	r5, r5, r9
 8003172:	60a5      	str	r5, [r4, #8]
 8003174:	42be      	cmp	r6, r7
 8003176:	d900      	bls.n	800317a <__ssputs_r+0x72>
 8003178:	463e      	mov	r6, r7
 800317a:	4632      	mov	r2, r6
 800317c:	4641      	mov	r1, r8
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	f000 faac 	bl	80036dc <memmove>
 8003184:	2000      	movs	r0, #0
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	1b9b      	subs	r3, r3, r6
 800318a:	60a3      	str	r3, [r4, #8]
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	4433      	add	r3, r6
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003196:	462a      	mov	r2, r5
 8003198:	f000 fae6 	bl	8003768 <_realloc_r>
 800319c:	4606      	mov	r6, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d1e0      	bne.n	8003164 <__ssputs_r+0x5c>
 80031a2:	4650      	mov	r0, sl
 80031a4:	6921      	ldr	r1, [r4, #16]
 80031a6:	f7ff feb9 	bl	8002f1c <_free_r>
 80031aa:	230c      	movs	r3, #12
 80031ac:	f8ca 3000 	str.w	r3, [sl]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	e7e9      	b.n	8003192 <__ssputs_r+0x8a>
	...

080031c0 <_svfiprintf_r>:
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	4698      	mov	r8, r3
 80031c6:	898b      	ldrh	r3, [r1, #12]
 80031c8:	4607      	mov	r7, r0
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	460d      	mov	r5, r1
 80031ce:	4614      	mov	r4, r2
 80031d0:	b09d      	sub	sp, #116	@ 0x74
 80031d2:	d510      	bpl.n	80031f6 <_svfiprintf_r+0x36>
 80031d4:	690b      	ldr	r3, [r1, #16]
 80031d6:	b973      	cbnz	r3, 80031f6 <_svfiprintf_r+0x36>
 80031d8:	2140      	movs	r1, #64	@ 0x40
 80031da:	f7ff ff09 	bl	8002ff0 <_malloc_r>
 80031de:	6028      	str	r0, [r5, #0]
 80031e0:	6128      	str	r0, [r5, #16]
 80031e2:	b930      	cbnz	r0, 80031f2 <_svfiprintf_r+0x32>
 80031e4:	230c      	movs	r3, #12
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	b01d      	add	sp, #116	@ 0x74
 80031ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f2:	2340      	movs	r3, #64	@ 0x40
 80031f4:	616b      	str	r3, [r5, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80031fa:	2320      	movs	r3, #32
 80031fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003200:	2330      	movs	r3, #48	@ 0x30
 8003202:	f04f 0901 	mov.w	r9, #1
 8003206:	f8cd 800c 	str.w	r8, [sp, #12]
 800320a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033a4 <_svfiprintf_r+0x1e4>
 800320e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003212:	4623      	mov	r3, r4
 8003214:	469a      	mov	sl, r3
 8003216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321a:	b10a      	cbz	r2, 8003220 <_svfiprintf_r+0x60>
 800321c:	2a25      	cmp	r2, #37	@ 0x25
 800321e:	d1f9      	bne.n	8003214 <_svfiprintf_r+0x54>
 8003220:	ebba 0b04 	subs.w	fp, sl, r4
 8003224:	d00b      	beq.n	800323e <_svfiprintf_r+0x7e>
 8003226:	465b      	mov	r3, fp
 8003228:	4622      	mov	r2, r4
 800322a:	4629      	mov	r1, r5
 800322c:	4638      	mov	r0, r7
 800322e:	f7ff ff6b 	bl	8003108 <__ssputs_r>
 8003232:	3001      	adds	r0, #1
 8003234:	f000 80a7 	beq.w	8003386 <_svfiprintf_r+0x1c6>
 8003238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800323a:	445a      	add	r2, fp
 800323c:	9209      	str	r2, [sp, #36]	@ 0x24
 800323e:	f89a 3000 	ldrb.w	r3, [sl]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 809f 	beq.w	8003386 <_svfiprintf_r+0x1c6>
 8003248:	2300      	movs	r3, #0
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003252:	f10a 0a01 	add.w	sl, sl, #1
 8003256:	9304      	str	r3, [sp, #16]
 8003258:	9307      	str	r3, [sp, #28]
 800325a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800325e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003260:	4654      	mov	r4, sl
 8003262:	2205      	movs	r2, #5
 8003264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003268:	484e      	ldr	r0, [pc, #312]	@ (80033a4 <_svfiprintf_r+0x1e4>)
 800326a:	f000 fa61 	bl	8003730 <memchr>
 800326e:	9a04      	ldr	r2, [sp, #16]
 8003270:	b9d8      	cbnz	r0, 80032aa <_svfiprintf_r+0xea>
 8003272:	06d0      	lsls	r0, r2, #27
 8003274:	bf44      	itt	mi
 8003276:	2320      	movmi	r3, #32
 8003278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800327c:	0711      	lsls	r1, r2, #28
 800327e:	bf44      	itt	mi
 8003280:	232b      	movmi	r3, #43	@ 0x2b
 8003282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003286:	f89a 3000 	ldrb.w	r3, [sl]
 800328a:	2b2a      	cmp	r3, #42	@ 0x2a
 800328c:	d015      	beq.n	80032ba <_svfiprintf_r+0xfa>
 800328e:	4654      	mov	r4, sl
 8003290:	2000      	movs	r0, #0
 8003292:	f04f 0c0a 	mov.w	ip, #10
 8003296:	9a07      	ldr	r2, [sp, #28]
 8003298:	4621      	mov	r1, r4
 800329a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800329e:	3b30      	subs	r3, #48	@ 0x30
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d94b      	bls.n	800333c <_svfiprintf_r+0x17c>
 80032a4:	b1b0      	cbz	r0, 80032d4 <_svfiprintf_r+0x114>
 80032a6:	9207      	str	r2, [sp, #28]
 80032a8:	e014      	b.n	80032d4 <_svfiprintf_r+0x114>
 80032aa:	eba0 0308 	sub.w	r3, r0, r8
 80032ae:	fa09 f303 	lsl.w	r3, r9, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	46a2      	mov	sl, r4
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	e7d2      	b.n	8003260 <_svfiprintf_r+0xa0>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	1d19      	adds	r1, r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	9103      	str	r1, [sp, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bfbb      	ittet	lt
 80032c6:	425b      	neglt	r3, r3
 80032c8:	f042 0202 	orrlt.w	r2, r2, #2
 80032cc:	9307      	strge	r3, [sp, #28]
 80032ce:	9307      	strlt	r3, [sp, #28]
 80032d0:	bfb8      	it	lt
 80032d2:	9204      	strlt	r2, [sp, #16]
 80032d4:	7823      	ldrb	r3, [r4, #0]
 80032d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d8:	d10a      	bne.n	80032f0 <_svfiprintf_r+0x130>
 80032da:	7863      	ldrb	r3, [r4, #1]
 80032dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032de:	d132      	bne.n	8003346 <_svfiprintf_r+0x186>
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	3402      	adds	r4, #2
 80032e4:	1d1a      	adds	r2, r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	9203      	str	r2, [sp, #12]
 80032ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032ee:	9305      	str	r3, [sp, #20]
 80032f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033a8 <_svfiprintf_r+0x1e8>
 80032f4:	2203      	movs	r2, #3
 80032f6:	4650      	mov	r0, sl
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	f000 fa19 	bl	8003730 <memchr>
 80032fe:	b138      	cbz	r0, 8003310 <_svfiprintf_r+0x150>
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	9b04      	ldr	r3, [sp, #16]
 8003304:	eba0 000a 	sub.w	r0, r0, sl
 8003308:	4082      	lsls	r2, r0
 800330a:	4313      	orrs	r3, r2
 800330c:	3401      	adds	r4, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003314:	2206      	movs	r2, #6
 8003316:	4825      	ldr	r0, [pc, #148]	@ (80033ac <_svfiprintf_r+0x1ec>)
 8003318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800331c:	f000 fa08 	bl	8003730 <memchr>
 8003320:	2800      	cmp	r0, #0
 8003322:	d036      	beq.n	8003392 <_svfiprintf_r+0x1d2>
 8003324:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <_svfiprintf_r+0x1f0>)
 8003326:	bb1b      	cbnz	r3, 8003370 <_svfiprintf_r+0x1b0>
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	3307      	adds	r3, #7
 800332c:	f023 0307 	bic.w	r3, r3, #7
 8003330:	3308      	adds	r3, #8
 8003332:	9303      	str	r3, [sp, #12]
 8003334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003336:	4433      	add	r3, r6
 8003338:	9309      	str	r3, [sp, #36]	@ 0x24
 800333a:	e76a      	b.n	8003212 <_svfiprintf_r+0x52>
 800333c:	460c      	mov	r4, r1
 800333e:	2001      	movs	r0, #1
 8003340:	fb0c 3202 	mla	r2, ip, r2, r3
 8003344:	e7a8      	b.n	8003298 <_svfiprintf_r+0xd8>
 8003346:	2300      	movs	r3, #0
 8003348:	f04f 0c0a 	mov.w	ip, #10
 800334c:	4619      	mov	r1, r3
 800334e:	3401      	adds	r4, #1
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	4620      	mov	r0, r4
 8003354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003358:	3a30      	subs	r2, #48	@ 0x30
 800335a:	2a09      	cmp	r2, #9
 800335c:	d903      	bls.n	8003366 <_svfiprintf_r+0x1a6>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0c6      	beq.n	80032f0 <_svfiprintf_r+0x130>
 8003362:	9105      	str	r1, [sp, #20]
 8003364:	e7c4      	b.n	80032f0 <_svfiprintf_r+0x130>
 8003366:	4604      	mov	r4, r0
 8003368:	2301      	movs	r3, #1
 800336a:	fb0c 2101 	mla	r1, ip, r1, r2
 800336e:	e7f0      	b.n	8003352 <_svfiprintf_r+0x192>
 8003370:	ab03      	add	r3, sp, #12
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	462a      	mov	r2, r5
 8003376:	4638      	mov	r0, r7
 8003378:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <_svfiprintf_r+0x1f4>)
 800337a:	a904      	add	r1, sp, #16
 800337c:	f3af 8000 	nop.w
 8003380:	1c42      	adds	r2, r0, #1
 8003382:	4606      	mov	r6, r0
 8003384:	d1d6      	bne.n	8003334 <_svfiprintf_r+0x174>
 8003386:	89ab      	ldrh	r3, [r5, #12]
 8003388:	065b      	lsls	r3, r3, #25
 800338a:	f53f af2d 	bmi.w	80031e8 <_svfiprintf_r+0x28>
 800338e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003390:	e72c      	b.n	80031ec <_svfiprintf_r+0x2c>
 8003392:	ab03      	add	r3, sp, #12
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	462a      	mov	r2, r5
 8003398:	4638      	mov	r0, r7
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <_svfiprintf_r+0x1f4>)
 800339c:	a904      	add	r1, sp, #16
 800339e:	f000 f87d 	bl	800349c <_printf_i>
 80033a2:	e7ed      	b.n	8003380 <_svfiprintf_r+0x1c0>
 80033a4:	08003977 	.word	0x08003977
 80033a8:	0800397d 	.word	0x0800397d
 80033ac:	08003981 	.word	0x08003981
 80033b0:	00000000 	.word	0x00000000
 80033b4:	08003109 	.word	0x08003109

080033b8 <_printf_common>:
 80033b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033bc:	4616      	mov	r6, r2
 80033be:	4698      	mov	r8, r3
 80033c0:	688a      	ldr	r2, [r1, #8]
 80033c2:	690b      	ldr	r3, [r1, #16]
 80033c4:	4607      	mov	r7, r0
 80033c6:	4293      	cmp	r3, r2
 80033c8:	bfb8      	it	lt
 80033ca:	4613      	movlt	r3, r2
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033d2:	460c      	mov	r4, r1
 80033d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033d8:	b10a      	cbz	r2, 80033de <_printf_common+0x26>
 80033da:	3301      	adds	r3, #1
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	0699      	lsls	r1, r3, #26
 80033e2:	bf42      	ittt	mi
 80033e4:	6833      	ldrmi	r3, [r6, #0]
 80033e6:	3302      	addmi	r3, #2
 80033e8:	6033      	strmi	r3, [r6, #0]
 80033ea:	6825      	ldr	r5, [r4, #0]
 80033ec:	f015 0506 	ands.w	r5, r5, #6
 80033f0:	d106      	bne.n	8003400 <_printf_common+0x48>
 80033f2:	f104 0a19 	add.w	sl, r4, #25
 80033f6:	68e3      	ldr	r3, [r4, #12]
 80033f8:	6832      	ldr	r2, [r6, #0]
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	42ab      	cmp	r3, r5
 80033fe:	dc2b      	bgt.n	8003458 <_printf_common+0xa0>
 8003400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003404:	6822      	ldr	r2, [r4, #0]
 8003406:	3b00      	subs	r3, #0
 8003408:	bf18      	it	ne
 800340a:	2301      	movne	r3, #1
 800340c:	0692      	lsls	r2, r2, #26
 800340e:	d430      	bmi.n	8003472 <_printf_common+0xba>
 8003410:	4641      	mov	r1, r8
 8003412:	4638      	mov	r0, r7
 8003414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003418:	47c8      	blx	r9
 800341a:	3001      	adds	r0, #1
 800341c:	d023      	beq.n	8003466 <_printf_common+0xae>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	6922      	ldr	r2, [r4, #16]
 8003422:	f003 0306 	and.w	r3, r3, #6
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf14      	ite	ne
 800342a:	2500      	movne	r5, #0
 800342c:	6833      	ldreq	r3, [r6, #0]
 800342e:	f04f 0600 	mov.w	r6, #0
 8003432:	bf08      	it	eq
 8003434:	68e5      	ldreq	r5, [r4, #12]
 8003436:	f104 041a 	add.w	r4, r4, #26
 800343a:	bf08      	it	eq
 800343c:	1aed      	subeq	r5, r5, r3
 800343e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003442:	bf08      	it	eq
 8003444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003448:	4293      	cmp	r3, r2
 800344a:	bfc4      	itt	gt
 800344c:	1a9b      	subgt	r3, r3, r2
 800344e:	18ed      	addgt	r5, r5, r3
 8003450:	42b5      	cmp	r5, r6
 8003452:	d11a      	bne.n	800348a <_printf_common+0xd2>
 8003454:	2000      	movs	r0, #0
 8003456:	e008      	b.n	800346a <_printf_common+0xb2>
 8003458:	2301      	movs	r3, #1
 800345a:	4652      	mov	r2, sl
 800345c:	4641      	mov	r1, r8
 800345e:	4638      	mov	r0, r7
 8003460:	47c8      	blx	r9
 8003462:	3001      	adds	r0, #1
 8003464:	d103      	bne.n	800346e <_printf_common+0xb6>
 8003466:	f04f 30ff 	mov.w	r0, #4294967295
 800346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346e:	3501      	adds	r5, #1
 8003470:	e7c1      	b.n	80033f6 <_printf_common+0x3e>
 8003472:	2030      	movs	r0, #48	@ 0x30
 8003474:	18e1      	adds	r1, r4, r3
 8003476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003480:	4422      	add	r2, r4
 8003482:	3302      	adds	r3, #2
 8003484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003488:	e7c2      	b.n	8003410 <_printf_common+0x58>
 800348a:	2301      	movs	r3, #1
 800348c:	4622      	mov	r2, r4
 800348e:	4641      	mov	r1, r8
 8003490:	4638      	mov	r0, r7
 8003492:	47c8      	blx	r9
 8003494:	3001      	adds	r0, #1
 8003496:	d0e6      	beq.n	8003466 <_printf_common+0xae>
 8003498:	3601      	adds	r6, #1
 800349a:	e7d9      	b.n	8003450 <_printf_common+0x98>

0800349c <_printf_i>:
 800349c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	7e0f      	ldrb	r7, [r1, #24]
 80034a2:	4691      	mov	r9, r2
 80034a4:	2f78      	cmp	r7, #120	@ 0x78
 80034a6:	4680      	mov	r8, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	469a      	mov	sl, r3
 80034ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034b2:	d807      	bhi.n	80034c4 <_printf_i+0x28>
 80034b4:	2f62      	cmp	r7, #98	@ 0x62
 80034b6:	d80a      	bhi.n	80034ce <_printf_i+0x32>
 80034b8:	2f00      	cmp	r7, #0
 80034ba:	f000 80d3 	beq.w	8003664 <_printf_i+0x1c8>
 80034be:	2f58      	cmp	r7, #88	@ 0x58
 80034c0:	f000 80ba 	beq.w	8003638 <_printf_i+0x19c>
 80034c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034cc:	e03a      	b.n	8003544 <_printf_i+0xa8>
 80034ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034d2:	2b15      	cmp	r3, #21
 80034d4:	d8f6      	bhi.n	80034c4 <_printf_i+0x28>
 80034d6:	a101      	add	r1, pc, #4	@ (adr r1, 80034dc <_printf_i+0x40>)
 80034d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034dc:	08003535 	.word	0x08003535
 80034e0:	08003549 	.word	0x08003549
 80034e4:	080034c5 	.word	0x080034c5
 80034e8:	080034c5 	.word	0x080034c5
 80034ec:	080034c5 	.word	0x080034c5
 80034f0:	080034c5 	.word	0x080034c5
 80034f4:	08003549 	.word	0x08003549
 80034f8:	080034c5 	.word	0x080034c5
 80034fc:	080034c5 	.word	0x080034c5
 8003500:	080034c5 	.word	0x080034c5
 8003504:	080034c5 	.word	0x080034c5
 8003508:	0800364b 	.word	0x0800364b
 800350c:	08003573 	.word	0x08003573
 8003510:	08003605 	.word	0x08003605
 8003514:	080034c5 	.word	0x080034c5
 8003518:	080034c5 	.word	0x080034c5
 800351c:	0800366d 	.word	0x0800366d
 8003520:	080034c5 	.word	0x080034c5
 8003524:	08003573 	.word	0x08003573
 8003528:	080034c5 	.word	0x080034c5
 800352c:	080034c5 	.word	0x080034c5
 8003530:	0800360d 	.word	0x0800360d
 8003534:	6833      	ldr	r3, [r6, #0]
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6032      	str	r2, [r6, #0]
 800353c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003544:	2301      	movs	r3, #1
 8003546:	e09e      	b.n	8003686 <_printf_i+0x1ea>
 8003548:	6833      	ldr	r3, [r6, #0]
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	6031      	str	r1, [r6, #0]
 8003550:	0606      	lsls	r6, r0, #24
 8003552:	d501      	bpl.n	8003558 <_printf_i+0xbc>
 8003554:	681d      	ldr	r5, [r3, #0]
 8003556:	e003      	b.n	8003560 <_printf_i+0xc4>
 8003558:	0645      	lsls	r5, r0, #25
 800355a:	d5fb      	bpl.n	8003554 <_printf_i+0xb8>
 800355c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003560:	2d00      	cmp	r5, #0
 8003562:	da03      	bge.n	800356c <_printf_i+0xd0>
 8003564:	232d      	movs	r3, #45	@ 0x2d
 8003566:	426d      	negs	r5, r5
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800356c:	230a      	movs	r3, #10
 800356e:	4859      	ldr	r0, [pc, #356]	@ (80036d4 <_printf_i+0x238>)
 8003570:	e011      	b.n	8003596 <_printf_i+0xfa>
 8003572:	6821      	ldr	r1, [r4, #0]
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	0608      	lsls	r0, r1, #24
 8003578:	f853 5b04 	ldr.w	r5, [r3], #4
 800357c:	d402      	bmi.n	8003584 <_printf_i+0xe8>
 800357e:	0649      	lsls	r1, r1, #25
 8003580:	bf48      	it	mi
 8003582:	b2ad      	uxthmi	r5, r5
 8003584:	2f6f      	cmp	r7, #111	@ 0x6f
 8003586:	6033      	str	r3, [r6, #0]
 8003588:	bf14      	ite	ne
 800358a:	230a      	movne	r3, #10
 800358c:	2308      	moveq	r3, #8
 800358e:	4851      	ldr	r0, [pc, #324]	@ (80036d4 <_printf_i+0x238>)
 8003590:	2100      	movs	r1, #0
 8003592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003596:	6866      	ldr	r6, [r4, #4]
 8003598:	2e00      	cmp	r6, #0
 800359a:	bfa8      	it	ge
 800359c:	6821      	ldrge	r1, [r4, #0]
 800359e:	60a6      	str	r6, [r4, #8]
 80035a0:	bfa4      	itt	ge
 80035a2:	f021 0104 	bicge.w	r1, r1, #4
 80035a6:	6021      	strge	r1, [r4, #0]
 80035a8:	b90d      	cbnz	r5, 80035ae <_printf_i+0x112>
 80035aa:	2e00      	cmp	r6, #0
 80035ac:	d04b      	beq.n	8003646 <_printf_i+0x1aa>
 80035ae:	4616      	mov	r6, r2
 80035b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b4:	fb03 5711 	mls	r7, r3, r1, r5
 80035b8:	5dc7      	ldrb	r7, [r0, r7]
 80035ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035be:	462f      	mov	r7, r5
 80035c0:	42bb      	cmp	r3, r7
 80035c2:	460d      	mov	r5, r1
 80035c4:	d9f4      	bls.n	80035b0 <_printf_i+0x114>
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d10b      	bne.n	80035e2 <_printf_i+0x146>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	07df      	lsls	r7, r3, #31
 80035ce:	d508      	bpl.n	80035e2 <_printf_i+0x146>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	6861      	ldr	r1, [r4, #4]
 80035d4:	4299      	cmp	r1, r3
 80035d6:	bfde      	ittt	le
 80035d8:	2330      	movle	r3, #48	@ 0x30
 80035da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035e2:	1b92      	subs	r2, r2, r6
 80035e4:	6122      	str	r2, [r4, #16]
 80035e6:	464b      	mov	r3, r9
 80035e8:	4621      	mov	r1, r4
 80035ea:	4640      	mov	r0, r8
 80035ec:	f8cd a000 	str.w	sl, [sp]
 80035f0:	aa03      	add	r2, sp, #12
 80035f2:	f7ff fee1 	bl	80033b8 <_printf_common>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d14a      	bne.n	8003690 <_printf_i+0x1f4>
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	b004      	add	sp, #16
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f043 0320 	orr.w	r3, r3, #32
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	2778      	movs	r7, #120	@ 0x78
 800360e:	4832      	ldr	r0, [pc, #200]	@ (80036d8 <_printf_i+0x23c>)
 8003610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	6831      	ldr	r1, [r6, #0]
 8003618:	061f      	lsls	r7, r3, #24
 800361a:	f851 5b04 	ldr.w	r5, [r1], #4
 800361e:	d402      	bmi.n	8003626 <_printf_i+0x18a>
 8003620:	065f      	lsls	r7, r3, #25
 8003622:	bf48      	it	mi
 8003624:	b2ad      	uxthmi	r5, r5
 8003626:	6031      	str	r1, [r6, #0]
 8003628:	07d9      	lsls	r1, r3, #31
 800362a:	bf44      	itt	mi
 800362c:	f043 0320 	orrmi.w	r3, r3, #32
 8003630:	6023      	strmi	r3, [r4, #0]
 8003632:	b11d      	cbz	r5, 800363c <_printf_i+0x1a0>
 8003634:	2310      	movs	r3, #16
 8003636:	e7ab      	b.n	8003590 <_printf_i+0xf4>
 8003638:	4826      	ldr	r0, [pc, #152]	@ (80036d4 <_printf_i+0x238>)
 800363a:	e7e9      	b.n	8003610 <_printf_i+0x174>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	f023 0320 	bic.w	r3, r3, #32
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	e7f6      	b.n	8003634 <_printf_i+0x198>
 8003646:	4616      	mov	r6, r2
 8003648:	e7bd      	b.n	80035c6 <_printf_i+0x12a>
 800364a:	6833      	ldr	r3, [r6, #0]
 800364c:	6825      	ldr	r5, [r4, #0]
 800364e:	1d18      	adds	r0, r3, #4
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	6030      	str	r0, [r6, #0]
 8003654:	062e      	lsls	r6, r5, #24
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	d501      	bpl.n	800365e <_printf_i+0x1c2>
 800365a:	6019      	str	r1, [r3, #0]
 800365c:	e002      	b.n	8003664 <_printf_i+0x1c8>
 800365e:	0668      	lsls	r0, r5, #25
 8003660:	d5fb      	bpl.n	800365a <_printf_i+0x1be>
 8003662:	8019      	strh	r1, [r3, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	4616      	mov	r6, r2
 8003668:	6123      	str	r3, [r4, #16]
 800366a:	e7bc      	b.n	80035e6 <_printf_i+0x14a>
 800366c:	6833      	ldr	r3, [r6, #0]
 800366e:	2100      	movs	r1, #0
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	6032      	str	r2, [r6, #0]
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	6862      	ldr	r2, [r4, #4]
 8003678:	4630      	mov	r0, r6
 800367a:	f000 f859 	bl	8003730 <memchr>
 800367e:	b108      	cbz	r0, 8003684 <_printf_i+0x1e8>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	6060      	str	r0, [r4, #4]
 8003684:	6863      	ldr	r3, [r4, #4]
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	2300      	movs	r3, #0
 800368a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800368e:	e7aa      	b.n	80035e6 <_printf_i+0x14a>
 8003690:	4632      	mov	r2, r6
 8003692:	4649      	mov	r1, r9
 8003694:	4640      	mov	r0, r8
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	47d0      	blx	sl
 800369a:	3001      	adds	r0, #1
 800369c:	d0ad      	beq.n	80035fa <_printf_i+0x15e>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	079b      	lsls	r3, r3, #30
 80036a2:	d413      	bmi.n	80036cc <_printf_i+0x230>
 80036a4:	68e0      	ldr	r0, [r4, #12]
 80036a6:	9b03      	ldr	r3, [sp, #12]
 80036a8:	4298      	cmp	r0, r3
 80036aa:	bfb8      	it	lt
 80036ac:	4618      	movlt	r0, r3
 80036ae:	e7a6      	b.n	80035fe <_printf_i+0x162>
 80036b0:	2301      	movs	r3, #1
 80036b2:	4632      	mov	r2, r6
 80036b4:	4649      	mov	r1, r9
 80036b6:	4640      	mov	r0, r8
 80036b8:	47d0      	blx	sl
 80036ba:	3001      	adds	r0, #1
 80036bc:	d09d      	beq.n	80035fa <_printf_i+0x15e>
 80036be:	3501      	adds	r5, #1
 80036c0:	68e3      	ldr	r3, [r4, #12]
 80036c2:	9903      	ldr	r1, [sp, #12]
 80036c4:	1a5b      	subs	r3, r3, r1
 80036c6:	42ab      	cmp	r3, r5
 80036c8:	dcf2      	bgt.n	80036b0 <_printf_i+0x214>
 80036ca:	e7eb      	b.n	80036a4 <_printf_i+0x208>
 80036cc:	2500      	movs	r5, #0
 80036ce:	f104 0619 	add.w	r6, r4, #25
 80036d2:	e7f5      	b.n	80036c0 <_printf_i+0x224>
 80036d4:	08003988 	.word	0x08003988
 80036d8:	08003999 	.word	0x08003999

080036dc <memmove>:
 80036dc:	4288      	cmp	r0, r1
 80036de:	b510      	push	{r4, lr}
 80036e0:	eb01 0402 	add.w	r4, r1, r2
 80036e4:	d902      	bls.n	80036ec <memmove+0x10>
 80036e6:	4284      	cmp	r4, r0
 80036e8:	4623      	mov	r3, r4
 80036ea:	d807      	bhi.n	80036fc <memmove+0x20>
 80036ec:	1e43      	subs	r3, r0, #1
 80036ee:	42a1      	cmp	r1, r4
 80036f0:	d008      	beq.n	8003704 <memmove+0x28>
 80036f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036fa:	e7f8      	b.n	80036ee <memmove+0x12>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4402      	add	r2, r0
 8003700:	428a      	cmp	r2, r1
 8003702:	d100      	bne.n	8003706 <memmove+0x2a>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800370a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370e:	e7f7      	b.n	8003700 <memmove+0x24>

08003710 <_sbrk_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	2300      	movs	r3, #0
 8003714:	4d05      	ldr	r5, [pc, #20]	@ (800372c <_sbrk_r+0x1c>)
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fc ffd8 	bl	80006d0 <_sbrk>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_sbrk_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_sbrk_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000244 	.word	0x20000244

08003730 <memchr>:
 8003730:	4603      	mov	r3, r0
 8003732:	b510      	push	{r4, lr}
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	4402      	add	r2, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	4618      	mov	r0, r3
 800373c:	d101      	bne.n	8003742 <memchr+0x12>
 800373e:	2000      	movs	r0, #0
 8003740:	e003      	b.n	800374a <memchr+0x1a>
 8003742:	7804      	ldrb	r4, [r0, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	428c      	cmp	r4, r1
 8003748:	d1f6      	bne.n	8003738 <memchr+0x8>
 800374a:	bd10      	pop	{r4, pc}

0800374c <memcpy>:
 800374c:	440a      	add	r2, r1
 800374e:	4291      	cmp	r1, r2
 8003750:	f100 33ff 	add.w	r3, r0, #4294967295
 8003754:	d100      	bne.n	8003758 <memcpy+0xc>
 8003756:	4770      	bx	lr
 8003758:	b510      	push	{r4, lr}
 800375a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375e:	4291      	cmp	r1, r2
 8003760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003764:	d1f9      	bne.n	800375a <memcpy+0xe>
 8003766:	bd10      	pop	{r4, pc}

08003768 <_realloc_r>:
 8003768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376c:	4680      	mov	r8, r0
 800376e:	4615      	mov	r5, r2
 8003770:	460c      	mov	r4, r1
 8003772:	b921      	cbnz	r1, 800377e <_realloc_r+0x16>
 8003774:	4611      	mov	r1, r2
 8003776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	f7ff bc39 	b.w	8002ff0 <_malloc_r>
 800377e:	b92a      	cbnz	r2, 800378c <_realloc_r+0x24>
 8003780:	f7ff fbcc 	bl	8002f1c <_free_r>
 8003784:	2400      	movs	r4, #0
 8003786:	4620      	mov	r0, r4
 8003788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800378c:	f000 f81a 	bl	80037c4 <_malloc_usable_size_r>
 8003790:	4285      	cmp	r5, r0
 8003792:	4606      	mov	r6, r0
 8003794:	d802      	bhi.n	800379c <_realloc_r+0x34>
 8003796:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800379a:	d8f4      	bhi.n	8003786 <_realloc_r+0x1e>
 800379c:	4629      	mov	r1, r5
 800379e:	4640      	mov	r0, r8
 80037a0:	f7ff fc26 	bl	8002ff0 <_malloc_r>
 80037a4:	4607      	mov	r7, r0
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d0ec      	beq.n	8003784 <_realloc_r+0x1c>
 80037aa:	42b5      	cmp	r5, r6
 80037ac:	462a      	mov	r2, r5
 80037ae:	4621      	mov	r1, r4
 80037b0:	bf28      	it	cs
 80037b2:	4632      	movcs	r2, r6
 80037b4:	f7ff ffca 	bl	800374c <memcpy>
 80037b8:	4621      	mov	r1, r4
 80037ba:	4640      	mov	r0, r8
 80037bc:	f7ff fbae 	bl	8002f1c <_free_r>
 80037c0:	463c      	mov	r4, r7
 80037c2:	e7e0      	b.n	8003786 <_realloc_r+0x1e>

080037c4 <_malloc_usable_size_r>:
 80037c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c8:	1f18      	subs	r0, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfbc      	itt	lt
 80037ce:	580b      	ldrlt	r3, [r1, r0]
 80037d0:	18c0      	addlt	r0, r0, r3
 80037d2:	4770      	bx	lr

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
